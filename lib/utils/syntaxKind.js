"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = require("typescript");
function syntaxKindtoName(s) {
    switch (s) {
        case typescript_1.SyntaxKind.Unknown:
            return "Unknown";
        case typescript_1.SyntaxKind.EndOfFileToken:
            return "EndOfFileToken";
        case typescript_1.SyntaxKind.SingleLineCommentTrivia:
            return "SingleLineCommentTrivia";
        case typescript_1.SyntaxKind.MultiLineCommentTrivia:
            return "MultiLineCommentTrivia";
        case typescript_1.SyntaxKind.NewLineTrivia:
            return "NewLineTrivia";
        case typescript_1.SyntaxKind.WhitespaceTrivia:
            return "WhitespaceTrivia";
        case typescript_1.SyntaxKind.ShebangTrivia:
            return "ShebangTrivia";
        case typescript_1.SyntaxKind.ConflictMarkerTrivia:
            return "ConflictMarkerTrivia";
        case typescript_1.SyntaxKind.NumericLiteral:
            return "NumericLiteral";
        case typescript_1.SyntaxKind.BigIntLiteral:
            return "BigIntLiteral";
        case typescript_1.SyntaxKind.StringLiteral:
            return "StringLiteral";
        case typescript_1.SyntaxKind.JsxText:
            return "JsxText";
        case typescript_1.SyntaxKind.JsxTextAllWhiteSpaces:
            return "JsxTextAllWhiteSpaces";
        case typescript_1.SyntaxKind.RegularExpressionLiteral:
            return "RegularExpressionLiteral";
        case typescript_1.SyntaxKind.NoSubstitutionTemplateLiteral:
            return "NoSubstitutionTemplateLiteral";
        case typescript_1.SyntaxKind.TemplateHead:
            return "TemplateHead";
        case typescript_1.SyntaxKind.TemplateMiddle:
            return "TemplateMiddle";
        case typescript_1.SyntaxKind.TemplateTail:
            return "TemplateTail";
        case typescript_1.SyntaxKind.OpenBraceToken:
            return "OpenBraceToken";
        case typescript_1.SyntaxKind.CloseBraceToken:
            return "CloseBraceToken";
        case typescript_1.SyntaxKind.OpenParenToken:
            return "OpenParenToken";
        case typescript_1.SyntaxKind.CloseParenToken:
            return "CloseParenToken";
        case typescript_1.SyntaxKind.OpenBracketToken:
            return "OpenBracketToken";
        case typescript_1.SyntaxKind.CloseBracketToken:
            return "CloseBracketToken";
        case typescript_1.SyntaxKind.DotToken:
            return "DotToken";
        case typescript_1.SyntaxKind.DotDotDotToken:
            return "DotDotDotToken";
        case typescript_1.SyntaxKind.SemicolonToken:
            return "SemicolonToken";
        case typescript_1.SyntaxKind.CommaToken:
            return "CommaToken";
        case typescript_1.SyntaxKind.LessThanToken:
            return "LessThanToken";
        case typescript_1.SyntaxKind.LessThanSlashToken:
            return "LessThanSlashToken";
        case typescript_1.SyntaxKind.GreaterThanToken:
            return "GreaterThanToken";
        case typescript_1.SyntaxKind.LessThanEqualsToken:
            return "LessThanEqualsToken";
        case typescript_1.SyntaxKind.GreaterThanEqualsToken:
            return "GreaterThanEqualsToken";
        case typescript_1.SyntaxKind.EqualsEqualsToken:
            return "EqualsEqualsToken";
        case typescript_1.SyntaxKind.ExclamationEqualsToken:
            return "ExclamationEqualsToken";
        case typescript_1.SyntaxKind.EqualsEqualsEqualsToken:
            return "EqualsEqualsEqualsToken";
        case typescript_1.SyntaxKind.ExclamationEqualsEqualsToken:
            return "ExclamationEqualsEqualsToken";
        case typescript_1.SyntaxKind.EqualsGreaterThanToken:
            return "EqualsGreaterThanToken";
        case typescript_1.SyntaxKind.PlusToken:
            return "PlusToken";
        case typescript_1.SyntaxKind.MinusToken:
            return "MinusToken";
        case typescript_1.SyntaxKind.AsteriskToken:
            return "AsteriskToken";
        case typescript_1.SyntaxKind.AsteriskAsteriskToken:
            return "AsteriskAsteriskToken";
        case typescript_1.SyntaxKind.SlashToken:
            return "SlashToken";
        case typescript_1.SyntaxKind.PercentToken:
            return "PercentToken";
        case typescript_1.SyntaxKind.PlusPlusToken:
            return "PlusPlusToken";
        case typescript_1.SyntaxKind.MinusMinusToken:
            return "MinusMinusToken";
        case typescript_1.SyntaxKind.LessThanLessThanToken:
            return "LessThanLessThanToken";
        case typescript_1.SyntaxKind.GreaterThanGreaterThanToken:
            return "GreaterThanGreaterThanToken";
        case typescript_1.SyntaxKind.GreaterThanGreaterThanGreaterThanToken:
            return "GreaterThanGreaterThanGreaterThanToken";
        case typescript_1.SyntaxKind.AmpersandToken:
            return "AmpersandToken";
        case typescript_1.SyntaxKind.BarToken:
            return "BarToken";
        case typescript_1.SyntaxKind.CaretToken:
            return "CaretToken";
        case typescript_1.SyntaxKind.ExclamationToken:
            return "ExclamationToken";
        case typescript_1.SyntaxKind.TildeToken:
            return "TildeToken";
        case typescript_1.SyntaxKind.AmpersandAmpersandToken:
            return "AmpersandAmpersandToken";
        case typescript_1.SyntaxKind.BarBarToken:
            return "BarBarToken";
        case typescript_1.SyntaxKind.QuestionToken:
            return "QuestionToken";
        case typescript_1.SyntaxKind.ColonToken:
            return "ColonToken";
        case typescript_1.SyntaxKind.AtToken:
            return "AtToken";
        /** Only the JSDoc scanner produces BacktickToken. The normal scanner produces NoSubstitutionTemplateLiteral and related kinds. */
        case typescript_1.SyntaxKind.BacktickToken:
            return "BacktickToken";
        case typescript_1.SyntaxKind.EqualsToken:
            return "EqualsToken";
        case typescript_1.SyntaxKind.PlusEqualsToken:
            return "PlusEqualsToken";
        case typescript_1.SyntaxKind.MinusEqualsToken:
            return "MinusEqualsToken";
        case typescript_1.SyntaxKind.AsteriskEqualsToken:
            return "AsteriskEqualsToken";
        case typescript_1.SyntaxKind.AsteriskAsteriskEqualsToken:
            return "AsteriskAsteriskEqualsToken";
        case typescript_1.SyntaxKind.SlashEqualsToken:
            return "SlashEqualsToken";
        case typescript_1.SyntaxKind.PercentEqualsToken:
            return "PercentEqualsToken";
        case typescript_1.SyntaxKind.LessThanLessThanEqualsToken:
            return "LessThanLessThanEqualsToken";
        case typescript_1.SyntaxKind.GreaterThanGreaterThanEqualsToken:
            return "GreaterThanGreaterThanEqualsToken";
        case typescript_1.SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken:
            return "GreaterThanGreaterThanGreaterThanEqualsToken";
        case typescript_1.SyntaxKind.AmpersandEqualsToken:
            return "AmpersandEqualsToken";
        case typescript_1.SyntaxKind.BarEqualsToken:
            return "BarEqualsToken";
        case typescript_1.SyntaxKind.CaretEqualsToken:
            return "CaretEqualsToken";
        case typescript_1.SyntaxKind.Identifier:
            return "Identifier";
        case typescript_1.SyntaxKind.BreakKeyword:
            return "BreakKeyword";
        case typescript_1.SyntaxKind.CaseKeyword:
            return "CaseKeyword";
        case typescript_1.SyntaxKind.CatchKeyword:
            return "CatchKeyword";
        case typescript_1.SyntaxKind.ClassKeyword:
            return "ClassKeyword";
        case typescript_1.SyntaxKind.ConstKeyword:
            return "ConstKeyword";
        case typescript_1.SyntaxKind.ContinueKeyword:
            return "ContinueKeyword";
        case typescript_1.SyntaxKind.DebuggerKeyword:
            return "DebuggerKeyword";
        case typescript_1.SyntaxKind.DefaultKeyword:
            return "DefaultKeyword";
        case typescript_1.SyntaxKind.DeleteKeyword:
            return "DeleteKeyword";
        case typescript_1.SyntaxKind.DoKeyword:
            return "DoKeyword";
        case typescript_1.SyntaxKind.ElseKeyword:
            return "ElseKeyword";
        case typescript_1.SyntaxKind.EnumKeyword:
            return "EnumKeyword";
        case typescript_1.SyntaxKind.ExportKeyword:
            return "ExportKeyword";
        case typescript_1.SyntaxKind.ExtendsKeyword:
            return "ExtendsKeyword";
        case typescript_1.SyntaxKind.FalseKeyword:
            return "FalseKeyword";
        case typescript_1.SyntaxKind.FinallyKeyword:
            return "FinallyKeyword";
        case typescript_1.SyntaxKind.ForKeyword:
            return "ForKeyword";
        case typescript_1.SyntaxKind.FunctionKeyword:
            return "FunctionKeyword";
        case typescript_1.SyntaxKind.IfKeyword:
            return "IfKeyword";
        case typescript_1.SyntaxKind.ImportKeyword:
            return "ImportKeyword";
        case typescript_1.SyntaxKind.InKeyword:
            return "InKeyword";
        case typescript_1.SyntaxKind.InstanceOfKeyword:
            return "InstanceOfKeyword";
        case typescript_1.SyntaxKind.NewKeyword:
            return "NewKeyword";
        case typescript_1.SyntaxKind.NullKeyword:
            return "NullKeyword";
        case typescript_1.SyntaxKind.ReturnKeyword:
            return "ReturnKeyword";
        case typescript_1.SyntaxKind.SuperKeyword:
            return "SuperKeyword";
        case typescript_1.SyntaxKind.SwitchKeyword:
            return "SwitchKeyword";
        case typescript_1.SyntaxKind.ThisKeyword:
            return "ThisKeyword";
        case typescript_1.SyntaxKind.ThrowKeyword:
            return "ThrowKeyword";
        case typescript_1.SyntaxKind.TrueKeyword:
            return "TrueKeyword";
        case typescript_1.SyntaxKind.TryKeyword:
            return "TryKeyword";
        case typescript_1.SyntaxKind.TypeOfKeyword:
            return "TypeOfKeyword";
        case typescript_1.SyntaxKind.VarKeyword:
            return "VarKeyword";
        case typescript_1.SyntaxKind.VoidKeyword:
            return "VoidKeyword";
        case typescript_1.SyntaxKind.WhileKeyword:
            return "WhileKeyword";
        case typescript_1.SyntaxKind.WithKeyword:
            return "WithKeyword";
        case typescript_1.SyntaxKind.ImplementsKeyword:
            return "ImplementsKeyword";
        case typescript_1.SyntaxKind.InterfaceKeyword:
            return "InterfaceKeyword";
        case typescript_1.SyntaxKind.LetKeyword:
            return "LetKeyword";
        case typescript_1.SyntaxKind.PackageKeyword:
            return "PackageKeyword";
        case typescript_1.SyntaxKind.PrivateKeyword:
            return "PrivateKeyword";
        case typescript_1.SyntaxKind.ProtectedKeyword:
            return "ProtectedKeyword";
        case typescript_1.SyntaxKind.PublicKeyword:
            return "PublicKeyword";
        case typescript_1.SyntaxKind.StaticKeyword:
            return "StaticKeyword";
        case typescript_1.SyntaxKind.YieldKeyword:
            return "YieldKeyword";
        case typescript_1.SyntaxKind.AbstractKeyword:
            return "AbstractKeyword";
        case typescript_1.SyntaxKind.AsKeyword:
            return "AsKeyword";
        case typescript_1.SyntaxKind.AnyKeyword:
            return "AnyKeyword";
        case typescript_1.SyntaxKind.AsyncKeyword:
            return "AsyncKeyword";
        case typescript_1.SyntaxKind.AwaitKeyword:
            return "AwaitKeyword";
        case typescript_1.SyntaxKind.BooleanKeyword:
            return "BooleanKeyword";
        case typescript_1.SyntaxKind.ConstructorKeyword:
            return "ConstructorKeyword";
        case typescript_1.SyntaxKind.DeclareKeyword:
            return "DeclareKeyword";
        case typescript_1.SyntaxKind.GetKeyword:
            return "GetKeyword";
        case typescript_1.SyntaxKind.InferKeyword:
            return "InferKeyword";
        case typescript_1.SyntaxKind.IsKeyword:
            return "IsKeyword";
        case typescript_1.SyntaxKind.KeyOfKeyword:
            return "KeyOfKeyword";
        case typescript_1.SyntaxKind.ModuleKeyword:
            return "ModuleKeyword";
        case typescript_1.SyntaxKind.NamespaceKeyword:
            return "NamespaceKeyword";
        case typescript_1.SyntaxKind.NeverKeyword:
            return "NeverKeyword";
        case typescript_1.SyntaxKind.ReadonlyKeyword:
            return "ReadonlyKeyword";
        case typescript_1.SyntaxKind.RequireKeyword:
            return "RequireKeyword";
        case typescript_1.SyntaxKind.NumberKeyword:
            return "NumberKeyword";
        case typescript_1.SyntaxKind.ObjectKeyword:
            return "ObjectKeyword";
        case typescript_1.SyntaxKind.SetKeyword:
            return "SetKeyword";
        case typescript_1.SyntaxKind.StringKeyword:
            return "StringKeyword";
        case typescript_1.SyntaxKind.SymbolKeyword:
            return "SymbolKeyword";
        case typescript_1.SyntaxKind.TypeKeyword:
            return "TypeKeyword";
        case typescript_1.SyntaxKind.UndefinedKeyword:
            return "UndefinedKeyword";
        case typescript_1.SyntaxKind.UniqueKeyword:
            return "UniqueKeyword";
        case typescript_1.SyntaxKind.UnknownKeyword:
            return "UnknownKeyword";
        case typescript_1.SyntaxKind.FromKeyword:
            return "FromKeyword";
        case typescript_1.SyntaxKind.GlobalKeyword:
            return "GlobalKeyword";
        case typescript_1.SyntaxKind.BigIntKeyword:
            return "BigIntKeyword";
        case typescript_1.SyntaxKind.OfKeyword:
            return "OfKeyword";
        case typescript_1.SyntaxKind.QualifiedName:
            return "QualifiedName";
        case typescript_1.SyntaxKind.ComputedPropertyName:
            return "ComputedPropertyName";
        case typescript_1.SyntaxKind.TypeParameter:
            return "TypeParameter";
        case typescript_1.SyntaxKind.Parameter:
            return "Parameter";
        case typescript_1.SyntaxKind.Decorator:
            return "Decorator";
        case typescript_1.SyntaxKind.PropertySignature:
            return "PropertySignature";
        case typescript_1.SyntaxKind.PropertyDeclaration:
            return "PropertyDeclaration";
        case typescript_1.SyntaxKind.MethodSignature:
            return "MethodSignature";
        case typescript_1.SyntaxKind.MethodDeclaration:
            return "MethodDeclaration";
        case typescript_1.SyntaxKind.Constructor:
            return "Constructor";
        case typescript_1.SyntaxKind.GetAccessor:
            return "GetAccessor";
        case typescript_1.SyntaxKind.SetAccessor:
            return "SetAccessor";
        case typescript_1.SyntaxKind.CallSignature:
            return "CallSignature";
        case typescript_1.SyntaxKind.ConstructSignature:
            return "ConstructSignature";
        case typescript_1.SyntaxKind.IndexSignature:
            return "IndexSignature";
        case typescript_1.SyntaxKind.TypePredicate:
            return "TypePredicate";
        case typescript_1.SyntaxKind.TypeReference:
            return "TypeReference";
        case typescript_1.SyntaxKind.FunctionType:
            return "FunctionType";
        case typescript_1.SyntaxKind.ConstructorType:
            return "ConstructorType";
        case typescript_1.SyntaxKind.TypeQuery:
            return "TypeQuery";
        case typescript_1.SyntaxKind.TypeLiteral:
            return "TypeLiteral";
        case typescript_1.SyntaxKind.ArrayType:
            return "ArrayType";
        case typescript_1.SyntaxKind.TupleType:
            return "TupleType";
        case typescript_1.SyntaxKind.OptionalType:
            return "OptionalType";
        case typescript_1.SyntaxKind.RestType:
            return "RestType";
        case typescript_1.SyntaxKind.UnionType:
            return "UnionType";
        case typescript_1.SyntaxKind.IntersectionType:
            return "IntersectionType";
        case typescript_1.SyntaxKind.ConditionalType:
            return "ConditionalType";
        case typescript_1.SyntaxKind.InferType:
            return "InferType";
        case typescript_1.SyntaxKind.ParenthesizedType:
            return "ParenthesizedType";
        case typescript_1.SyntaxKind.ThisType:
            return "ThisType";
        case typescript_1.SyntaxKind.TypeOperator:
            return "TypeOperator";
        case typescript_1.SyntaxKind.IndexedAccessType:
            return "IndexedAccessType";
        case typescript_1.SyntaxKind.MappedType:
            return "MappedType";
        case typescript_1.SyntaxKind.LiteralType:
            return "LiteralType";
        case typescript_1.SyntaxKind.ImportType:
            return "ImportType";
        case typescript_1.SyntaxKind.ObjectBindingPattern:
            return "ObjectBindingPattern";
        case typescript_1.SyntaxKind.ArrayBindingPattern:
            return "ArrayBindingPattern";
        case typescript_1.SyntaxKind.BindingElement:
            return "BindingElement";
        case typescript_1.SyntaxKind.ArrayLiteralExpression:
            return "ArrayLiteralExpression";
        case typescript_1.SyntaxKind.ObjectLiteralExpression:
            return "ObjectLiteralExpression";
        case typescript_1.SyntaxKind.PropertyAccessExpression:
            return "PropertyAccessExpression";
        case typescript_1.SyntaxKind.ElementAccessExpression:
            return "ElementAccessExpression";
        case typescript_1.SyntaxKind.CallExpression:
            return "CallExpression";
        case typescript_1.SyntaxKind.NewExpression:
            return "NewExpression";
        case typescript_1.SyntaxKind.TaggedTemplateExpression:
            return "TaggedTemplateExpression";
        case typescript_1.SyntaxKind.TypeAssertionExpression:
            return "TypeAssertionExpression";
        case typescript_1.SyntaxKind.ParenthesizedExpression:
            return "ParenthesizedExpression";
        case typescript_1.SyntaxKind.FunctionExpression:
            return "FunctionExpression";
        case typescript_1.SyntaxKind.ArrowFunction:
            return "ArrowFunction";
        case typescript_1.SyntaxKind.DeleteExpression:
            return "DeleteExpression";
        case typescript_1.SyntaxKind.TypeOfExpression:
            return "TypeOfExpression";
        case typescript_1.SyntaxKind.VoidExpression:
            return "VoidExpression";
        case typescript_1.SyntaxKind.AwaitExpression:
            return "AwaitExpression";
        case typescript_1.SyntaxKind.PrefixUnaryExpression:
            return "PrefixUnaryExpression";
        case typescript_1.SyntaxKind.PostfixUnaryExpression:
            return "PostfixUnaryExpression";
        case typescript_1.SyntaxKind.BinaryExpression:
            return "BinaryExpression";
        case typescript_1.SyntaxKind.ConditionalExpression:
            return "ConditionalExpression";
        case typescript_1.SyntaxKind.TemplateExpression:
            return "TemplateExpression";
        case typescript_1.SyntaxKind.YieldExpression:
            return "YieldExpression";
        case typescript_1.SyntaxKind.SpreadElement:
            return "SpreadElement";
        case typescript_1.SyntaxKind.ClassExpression:
            return "ClassExpression";
        case typescript_1.SyntaxKind.OmittedExpression:
            return "OmittedExpression";
        case typescript_1.SyntaxKind.ExpressionWithTypeArguments:
            return "ExpressionWithTypeArguments";
        case typescript_1.SyntaxKind.AsExpression:
            return "AsExpression";
        case typescript_1.SyntaxKind.NonNullExpression:
            return "NonNullExpression";
        case typescript_1.SyntaxKind.MetaProperty:
            return "MetaProperty";
        case typescript_1.SyntaxKind.SyntheticExpression:
            return "SyntheticExpression";
        case typescript_1.SyntaxKind.TemplateSpan:
            return "TemplateSpan";
        case typescript_1.SyntaxKind.SemicolonClassElement:
            return "SemicolonClassElement";
        case typescript_1.SyntaxKind.Block:
            return "Block";
        case typescript_1.SyntaxKind.VariableStatement:
            return "VariableStatement";
        case typescript_1.SyntaxKind.EmptyStatement:
            return "EmptyStatement";
        case typescript_1.SyntaxKind.ExpressionStatement:
            return "ExpressionStatement";
        case typescript_1.SyntaxKind.IfStatement:
            return "IfStatement";
        case typescript_1.SyntaxKind.DoStatement:
            return "DoStatement";
        case typescript_1.SyntaxKind.WhileStatement:
            return "WhileStatement";
        case typescript_1.SyntaxKind.ForStatement:
            return "ForStatement";
        case typescript_1.SyntaxKind.ForInStatement:
            return "ForInStatement";
        case typescript_1.SyntaxKind.ForOfStatement:
            return "ForOfStatement";
        case typescript_1.SyntaxKind.ContinueStatement:
            return "ContinueStatement";
        case typescript_1.SyntaxKind.BreakStatement:
            return "BreakStatement";
        case typescript_1.SyntaxKind.ReturnStatement:
            return "ReturnStatement";
        case typescript_1.SyntaxKind.WithStatement:
            return "WithStatement";
        case typescript_1.SyntaxKind.SwitchStatement:
            return "SwitchStatement";
        case typescript_1.SyntaxKind.LabeledStatement:
            return "LabeledStatement";
        case typescript_1.SyntaxKind.ThrowStatement:
            return "ThrowStatement";
        case typescript_1.SyntaxKind.TryStatement:
            return "TryStatement";
        case typescript_1.SyntaxKind.DebuggerStatement:
            return "DebuggerStatement";
        case typescript_1.SyntaxKind.VariableDeclaration:
            return "VariableDeclaration";
        case typescript_1.SyntaxKind.VariableDeclarationList:
            return "VariableDeclarationList";
        case typescript_1.SyntaxKind.FunctionDeclaration:
            return "FunctionDeclaration";
        case typescript_1.SyntaxKind.ClassDeclaration:
            return "ClassDeclaration";
        case typescript_1.SyntaxKind.InterfaceDeclaration:
            return "InterfaceDeclaration";
        case typescript_1.SyntaxKind.TypeAliasDeclaration:
            return "TypeAliasDeclaration";
        case typescript_1.SyntaxKind.EnumDeclaration:
            return "EnumDeclaration";
        case typescript_1.SyntaxKind.ModuleDeclaration:
            return "ModuleDeclaration";
        case typescript_1.SyntaxKind.ModuleBlock:
            return "ModuleBlock";
        case typescript_1.SyntaxKind.CaseBlock:
            return "CaseBlock";
        case typescript_1.SyntaxKind.NamespaceExportDeclaration:
            return "NamespaceExportDeclaration";
        case typescript_1.SyntaxKind.ImportEqualsDeclaration:
            return "ImportEqualsDeclaration";
        case typescript_1.SyntaxKind.ImportDeclaration:
            return "ImportDeclaration";
        case typescript_1.SyntaxKind.ImportClause:
            return "ImportClause";
        case typescript_1.SyntaxKind.NamespaceImport:
            return "NamespaceImport";
        case typescript_1.SyntaxKind.NamedImports:
            return "NamedImports";
        case typescript_1.SyntaxKind.ImportSpecifier:
            return "ImportSpecifier";
        case typescript_1.SyntaxKind.ExportAssignment:
            return "ExportAssignment";
        case typescript_1.SyntaxKind.ExportDeclaration:
            return "ExportDeclaration";
        case typescript_1.SyntaxKind.NamedExports:
            return "NamedExports";
        case typescript_1.SyntaxKind.ExportSpecifier:
            return "ExportSpecifier";
        case typescript_1.SyntaxKind.MissingDeclaration:
            return "MissingDeclaration";
        case typescript_1.SyntaxKind.ExternalModuleReference:
            return "ExternalModuleReference";
        case typescript_1.SyntaxKind.JsxElement:
            return "JsxElement";
        case typescript_1.SyntaxKind.JsxSelfClosingElement:
            return "JsxSelfClosingElement";
        case typescript_1.SyntaxKind.JsxOpeningElement:
            return "JsxOpeningElement";
        case typescript_1.SyntaxKind.JsxClosingElement:
            return "JsxClosingElement";
        case typescript_1.SyntaxKind.JsxFragment:
            return "JsxFragment";
        case typescript_1.SyntaxKind.JsxOpeningFragment:
            return "JsxOpeningFragment";
        case typescript_1.SyntaxKind.JsxClosingFragment:
            return "JsxClosingFragment";
        case typescript_1.SyntaxKind.JsxAttribute:
            return "JsxAttribute";
        case typescript_1.SyntaxKind.JsxAttributes:
            return "JsxAttributes";
        case typescript_1.SyntaxKind.JsxSpreadAttribute:
            return "JsxSpreadAttribute";
        case typescript_1.SyntaxKind.JsxExpression:
            return "JsxExpression";
        case typescript_1.SyntaxKind.CaseClause:
            return "CaseClause";
        case typescript_1.SyntaxKind.DefaultClause:
            return "DefaultClause";
        case typescript_1.SyntaxKind.HeritageClause:
            return "HeritageClause";
        case typescript_1.SyntaxKind.CatchClause:
            return "CatchClause";
        case typescript_1.SyntaxKind.PropertyAssignment:
            return "PropertyAssignment";
        case typescript_1.SyntaxKind.ShorthandPropertyAssignment:
            return "ShorthandPropertyAssignment";
        case typescript_1.SyntaxKind.SpreadAssignment:
            return "SpreadAssignment";
        case typescript_1.SyntaxKind.EnumMember:
            return "EnumMember";
        case typescript_1.SyntaxKind.UnparsedPrologue:
            return "UnparsedPrologue";
        case typescript_1.SyntaxKind.UnparsedPrepend:
            return "UnparsedPrepend";
        case typescript_1.SyntaxKind.UnparsedText:
            return "UnparsedText";
        case typescript_1.SyntaxKind.UnparsedInternalText:
            return "UnparsedInternalText";
        case typescript_1.SyntaxKind.UnparsedSyntheticReference:
            return "UnparsedSyntheticReference";
        case typescript_1.SyntaxKind.SourceFile:
            return "SourceFile";
        case typescript_1.SyntaxKind.Bundle:
            return "Bundle";
        case typescript_1.SyntaxKind.UnparsedSource:
            return "UnparsedSource";
        case typescript_1.SyntaxKind.InputFiles:
            return "InputFiles";
        case typescript_1.SyntaxKind.JSDocTypeExpression:
            return "JSDocTypeExpression";
        case typescript_1.SyntaxKind.JSDocAllType:
            return "JSDocAllType";
        case typescript_1.SyntaxKind.JSDocUnknownType:
            return "JSDocUnknownType";
        case typescript_1.SyntaxKind.JSDocNullableType:
            return "JSDocNullableType";
        case typescript_1.SyntaxKind.JSDocNonNullableType:
            return "JSDocNonNullableType";
        case typescript_1.SyntaxKind.JSDocOptionalType:
            return "JSDocOptionalType";
        case typescript_1.SyntaxKind.JSDocFunctionType:
            return "JSDocFunctionType";
        case typescript_1.SyntaxKind.JSDocVariadicType:
            return "JSDocVariadicType";
        case typescript_1.SyntaxKind.JSDocNamepathType:
            return "JSDocNamepathType";
        case typescript_1.SyntaxKind.JSDocComment:
            return "JSDocComment";
        case typescript_1.SyntaxKind.JSDocTypeLiteral:
            return "JSDocTypeLiteral";
        case typescript_1.SyntaxKind.JSDocSignature:
            return "JSDocSignature";
        case typescript_1.SyntaxKind.JSDocTag:
            return "JSDocTag";
        case typescript_1.SyntaxKind.JSDocAugmentsTag:
            return "JSDocAugmentsTag";
        case typescript_1.SyntaxKind.JSDocAuthorTag:
            return "JSDocAuthorTag";
        case typescript_1.SyntaxKind.JSDocClassTag:
            return "JSDocClassTag";
        case typescript_1.SyntaxKind.JSDocCallbackTag:
            return "JSDocCallbackTag";
        case typescript_1.SyntaxKind.JSDocEnumTag:
            return "JSDocEnumTag";
        case typescript_1.SyntaxKind.JSDocParameterTag:
            return "JSDocParameterTag";
        case typescript_1.SyntaxKind.JSDocReturnTag:
            return "JSDocReturnTag";
        case typescript_1.SyntaxKind.JSDocThisTag:
            return "JSDocThisTag";
        case typescript_1.SyntaxKind.JSDocTypeTag:
            return "JSDocTypeTag";
        case typescript_1.SyntaxKind.JSDocTemplateTag:
            return "JSDocTemplateTag";
        case typescript_1.SyntaxKind.JSDocTypedefTag:
            return "JSDocTypedefTag";
        case typescript_1.SyntaxKind.JSDocPropertyTag:
            return "JSDocPropertyTag";
        case typescript_1.SyntaxKind.SyntaxList:
            return "SyntaxList";
        case typescript_1.SyntaxKind.NotEmittedStatement:
            return "NotEmittedStatement";
        case typescript_1.SyntaxKind.PartiallyEmittedExpression:
            return "PartiallyEmittedExpression";
        case typescript_1.SyntaxKind.CommaListExpression:
            return "CommaListExpression";
        case typescript_1.SyntaxKind.MergeDeclarationMarker:
            return "MergeDeclarationMarker";
        case typescript_1.SyntaxKind.EndOfDeclarationMarker:
            return "EndOfDeclarationMarker";
        case typescript_1.SyntaxKind.Count:
            return "Count";
        case typescript_1.SyntaxKind.FirstAssignment:
            return "FirstAssignment";
        case typescript_1.SyntaxKind.LastAssignment:
            return "LastAssignment";
        case typescript_1.SyntaxKind.FirstCompoundAssignment:
            return "FirstCompoundAssignment";
        case typescript_1.SyntaxKind.LastCompoundAssignment:
            return "LastCompoundAssignment";
        case typescript_1.SyntaxKind.FirstReservedWord:
            return "FirstReservedWord";
        case typescript_1.SyntaxKind.LastReservedWord:
            return "LastReservedWord";
        case typescript_1.SyntaxKind.FirstKeyword:
            return "FirstKeyword";
        case typescript_1.SyntaxKind.LastKeyword:
            return "LastKeyword";
        case typescript_1.SyntaxKind.FirstFutureReservedWord:
            return "FirstFutureReservedWord";
        case typescript_1.SyntaxKind.LastFutureReservedWord:
            return "LastFutureReservedWord";
        case typescript_1.SyntaxKind.FirstTypeNode:
            return "FirstTypeNode";
        case typescript_1.SyntaxKind.LastTypeNode:
            return "LastTypeNode";
        case typescript_1.SyntaxKind.FirstPunctuation:
            return "FirstPunctuation";
        case typescript_1.SyntaxKind.LastPunctuation:
            return "LastPunctuation";
        case typescript_1.SyntaxKind.FirstToken:
            return "FirstToken";
        case typescript_1.SyntaxKind.LastToken:
            return "LastToken";
        case typescript_1.SyntaxKind.FirstTriviaToken:
            return "FirstTriviaToken";
        case typescript_1.SyntaxKind.LastTriviaToken:
            return "LastTriviaToken";
        case typescript_1.SyntaxKind.FirstLiteralToken:
            return "FirstLiteralToken";
        case typescript_1.SyntaxKind.LastLiteralToken:
            return "LastLiteralToken";
        case typescript_1.SyntaxKind.FirstTemplateToken:
            return "FirstTemplateToken";
        case typescript_1.SyntaxKind.LastTemplateToken:
            return "LastTemplateToken";
        case typescript_1.SyntaxKind.FirstBinaryOperator:
            return "FirstBinaryOperator";
        case typescript_1.SyntaxKind.LastBinaryOperator:
            return "LastBinaryOperator";
        case typescript_1.SyntaxKind.FirstNode:
            return "FirstNode";
        case typescript_1.SyntaxKind.FirstJSDocNode:
            return "FirstJSDocNode";
        case typescript_1.SyntaxKind.LastJSDocNode:
            return "LastJSDocNode";
        case typescript_1.SyntaxKind.FirstJSDocTagNode:
            return "FirstJSDocTagNode";
        case typescript_1.SyntaxKind.LastJSDocTagNode:
            return "LastJSDocTagNode";
        default:
            return "LOL";
    }
}
exports.syntaxKindtoName = syntaxKindtoName;
function typeFlagToName(flag) {
    switch (flag) {
        case typescript_1.TypeFlags.Any:
            return "Any";
        case typescript_1.TypeFlags.Unknown:
            return "Unknown";
        case typescript_1.TypeFlags.String:
            return "String";
        case typescript_1.TypeFlags.Number:
            return "Number";
        case typescript_1.TypeFlags.Boolean:
            return "Boolean";
        case typescript_1.TypeFlags.Enum:
            return "Enum";
        case typescript_1.TypeFlags.BigInt:
            return "BigInt";
        case typescript_1.TypeFlags.StringLiteral:
            return "StringLiteral";
        case typescript_1.TypeFlags.NumberLiteral:
            return "NumberLiteral";
        case typescript_1.TypeFlags.BooleanLiteral:
            return "BooleanLiteral";
        case typescript_1.TypeFlags.EnumLiteral:
            return "EnumLiteral";
        case typescript_1.TypeFlags.BigIntLiteral:
            return "BigIntLiteral";
        case typescript_1.TypeFlags.ESSymbol:
            return "ESSymbol";
        case typescript_1.TypeFlags.UniqueESSymbol:
            return "UniqueESSymbol";
        case typescript_1.TypeFlags.Void:
            return "Void";
        case typescript_1.TypeFlags.Undefined:
            return "Undefined";
        case typescript_1.TypeFlags.Null:
            return "Null";
        case typescript_1.TypeFlags.Never:
            return "Never";
        case typescript_1.TypeFlags.TypeParameter:
            return "TypeParameter";
        case typescript_1.TypeFlags.Object:
            return "Object";
        case typescript_1.TypeFlags.Union:
            return "Union";
        case typescript_1.TypeFlags.Intersection:
            return "Intersection";
        case typescript_1.TypeFlags.Index:
            return "Index";
        case typescript_1.TypeFlags.IndexedAccess:
            return "IndexedAccess";
        case typescript_1.TypeFlags.Conditional:
            return "Conditional";
        case typescript_1.TypeFlags.Substitution:
            return "Substitution";
        case typescript_1.TypeFlags.NonPrimitive:
            return "NonPrimitive";
        case typescript_1.TypeFlags.Literal:
            return "Literal";
        case typescript_1.TypeFlags.Unit:
            return "Unit";
        case typescript_1.TypeFlags.StringOrNumberLiteral:
            return "StringOrNumberLiteral";
        case typescript_1.TypeFlags.PossiblyFalsy:
            return "PossiblyFalsy";
        case typescript_1.TypeFlags.StringLike:
            return "StringLike";
        case typescript_1.TypeFlags.NumberLike:
            return "NumberLike";
        case typescript_1.TypeFlags.BigIntLike:
            return "BigIntLike";
        case typescript_1.TypeFlags.BooleanLike:
            return "BooleanLike";
        case typescript_1.TypeFlags.EnumLike:
            return "EnumLike";
        case typescript_1.TypeFlags.ESSymbolLike:
            return "ESSymbolLike";
        case typescript_1.TypeFlags.VoidLike:
            return "VoidLike";
        case typescript_1.TypeFlags.UnionOrIntersection:
            return "UnionOrIntersection";
        case typescript_1.TypeFlags.StructuredType:
            return "StructuredType";
        case typescript_1.TypeFlags.TypeVariable:
            return "TypeVariable";
        case typescript_1.TypeFlags.InstantiableNonPrimitive:
            return "InstantiableNonPrimitive";
        case typescript_1.TypeFlags.InstantiablePrimitive:
            return "InstantiablePrimitive";
        case typescript_1.TypeFlags.Instantiable:
            return "Instantiable";
        case typescript_1.TypeFlags.StructuredOrInstantiable:
            return "StructuredOrInstantiable";
        case typescript_1.TypeFlags.Narrowable:
            return "Narrowable";
        case typescript_1.TypeFlags.NotUnionOrUnit:
            return "NotUnionOrUnit";
    }
}
exports.typeFlagToName = typeFlagToName;
function symbolFlagToName(s) {
    switch (s) {
        case typescript_1.SymbolFlags.None:
            return "None";
        case typescript_1.SymbolFlags.FunctionScopedVariable:
            return "FunctionScopedVariable";
        case typescript_1.SymbolFlags.BlockScopedVariable:
            return "BlockScopedVariable";
        case typescript_1.SymbolFlags.Property:
            return "Property";
        case typescript_1.SymbolFlags.EnumMember:
            return "EnumMember";
        case typescript_1.SymbolFlags.Function:
            return "Function";
        case typescript_1.SymbolFlags.Class:
            return "Class";
        case typescript_1.SymbolFlags.Interface:
            return "Interface";
        case typescript_1.SymbolFlags.ConstEnum:
            return "ConstEnum";
        case typescript_1.SymbolFlags.RegularEnum:
            return "RegularEnum";
        case typescript_1.SymbolFlags.ValueModule:
            return "ValueModule";
        case typescript_1.SymbolFlags.NamespaceModule:
            return "NamespaceModule";
        case typescript_1.SymbolFlags.TypeLiteral:
            return "TypeLiteral";
        case typescript_1.SymbolFlags.ObjectLiteral:
            return "ObjectLiteral";
        case typescript_1.SymbolFlags.Method:
            return "Method";
        case typescript_1.SymbolFlags.Constructor:
            return "Constructor";
        case typescript_1.SymbolFlags.GetAccessor:
            return "GetAccessor";
        case typescript_1.SymbolFlags.SetAccessor:
            return "SetAccessor";
        case typescript_1.SymbolFlags.Signature:
            return "Signature";
        case typescript_1.SymbolFlags.TypeParameter:
            return "TypeParameter";
        case typescript_1.SymbolFlags.TypeAlias:
            return "TypeAlias";
        case typescript_1.SymbolFlags.ExportValue:
            return "ExportValue";
        case typescript_1.SymbolFlags.Alias:
            return "Alias";
        case typescript_1.SymbolFlags.Prototype:
            return "Prototype";
        case typescript_1.SymbolFlags.ExportStar:
            return "ExportStar";
        case typescript_1.SymbolFlags.Optional:
            return "Optional";
        case typescript_1.SymbolFlags.Transient:
            return "Transient";
        case typescript_1.SymbolFlags.Assignment:
            return "Assignment";
        case typescript_1.SymbolFlags.ModuleExports:
            return "ModuleExports";
        case typescript_1.SymbolFlags.Enum:
            return "Enum";
        case typescript_1.SymbolFlags.Variable:
            return "Variable";
        case typescript_1.SymbolFlags.Value:
            return "Value";
        case typescript_1.SymbolFlags.Type:
            return "Type";
        case typescript_1.SymbolFlags.Namespace:
            return "Namespace";
        case typescript_1.SymbolFlags.Module:
            return "Module";
        case typescript_1.SymbolFlags.Accessor:
            return "Accessor";
        case typescript_1.SymbolFlags.FunctionScopedVariableExcludes:
            return "FunctionScopedVariableExcludes";
        case typescript_1.SymbolFlags.BlockScopedVariableExcludes:
            return "BlockScopedVariableExcludes";
        case typescript_1.SymbolFlags.ParameterExcludes:
            return "ParameterExcludes";
        case typescript_1.SymbolFlags.PropertyExcludes:
            return "PropertyExcludes";
        case typescript_1.SymbolFlags.EnumMemberExcludes:
            return "EnumMemberExcludes";
        case typescript_1.SymbolFlags.FunctionExcludes:
            return "FunctionExcludes";
        case typescript_1.SymbolFlags.ClassExcludes:
            return "ClassExcludes";
        case typescript_1.SymbolFlags.InterfaceExcludes:
            return "InterfaceExcludes";
        case typescript_1.SymbolFlags.RegularEnumExcludes:
            return "RegularEnumExcludes";
        case typescript_1.SymbolFlags.ConstEnumExcludes:
            return "ConstEnumExcludes";
        case typescript_1.SymbolFlags.ValueModuleExcludes:
            return "ValueModuleExcludes";
        case typescript_1.SymbolFlags.NamespaceModuleExcludes:
            return "NamespaceModuleExcludes";
        case typescript_1.SymbolFlags.MethodExcludes:
            return "MethodExcludes";
        case typescript_1.SymbolFlags.GetAccessorExcludes:
            return "GetAccessorExcludes";
        case typescript_1.SymbolFlags.SetAccessorExcludes:
            return "SetAccessorExcludes";
        case typescript_1.SymbolFlags.TypeParameterExcludes:
            return "TypeParameterExcludes";
        case typescript_1.SymbolFlags.TypeAliasExcludes:
            return "TypeAliasExcludes";
        case typescript_1.SymbolFlags.AliasExcludes:
            return "AliasExcludes";
        case typescript_1.SymbolFlags.ModuleMember:
            return "ModuleMember";
        case typescript_1.SymbolFlags.ExportHasLocal:
            return "ExportHasLocal";
        case typescript_1.SymbolFlags.BlockScoped:
            return "BlockScoped";
        case typescript_1.SymbolFlags.PropertyOrAccessor:
            return "PropertyOrAccessor";
        case typescript_1.SymbolFlags.ClassMember:
            return "ClassMember";
    }
}
exports.symbolFlagToName = symbolFlagToName;
function nodeFlagToName(s) {
    switch (s) {
        case typescript_1.NodeFlags.None:
            return "None";
        case typescript_1.NodeFlags.Let:
            return "Let";
        case typescript_1.NodeFlags.Const:
            return "Const";
        case typescript_1.NodeFlags.NestedNamespace:
            return "NestedNamespace";
        case typescript_1.NodeFlags.Synthesized:
            return "Synthesized";
        case typescript_1.NodeFlags.Namespace:
            return "Namespace";
        case typescript_1.NodeFlags.OptionalChain:
            return "OptionalChain";
        case typescript_1.NodeFlags.ExportContext:
            return "ExportContext";
        case typescript_1.NodeFlags.ContainsThis:
            return "ContainsThis";
        case typescript_1.NodeFlags.HasImplicitReturn:
            return "HasImplicitReturn";
        case typescript_1.NodeFlags.HasExplicitReturn:
            return "HasExplicitReturn";
        case typescript_1.NodeFlags.GlobalAugmentation:
            return "GlobalAugmentation";
        case typescript_1.NodeFlags.HasAsyncFunctions:
            return "HasAsyncFunctions";
        case typescript_1.NodeFlags.DisallowInContext:
            return "DisallowInContext";
        case typescript_1.NodeFlags.YieldContext:
            return "YieldContext";
        case typescript_1.NodeFlags.DecoratorContext:
            return "DecoratorContext";
        case typescript_1.NodeFlags.AwaitContext:
            return "AwaitContext";
        case typescript_1.NodeFlags.ThisNodeHasError:
            return "ThisNodeHasError";
        case typescript_1.NodeFlags.JavaScriptFile:
            return "JavaScriptFile";
        case typescript_1.NodeFlags.ThisNodeOrAnySubNodesHasError:
            return "ThisNodeOrAnySubNodesHasError";
        case typescript_1.NodeFlags.HasAggregatedChildData:
            return "HasAggregatedChildData";
        case typescript_1.NodeFlags.JSDoc:
            return "JSDoc";
        case typescript_1.NodeFlags.JsonFile:
            return "JsonFile";
        case typescript_1.NodeFlags.BlockScoped:
            return "BlockScoped";
        case typescript_1.NodeFlags.ReachabilityCheckFlags:
            return "ReachabilityCheckFlags";
        case typescript_1.NodeFlags.ReachabilityAndEmitFlags:
            return "ReachabilityAndEmitFlags";
        case typescript_1.NodeFlags.ContextFlags:
            return "ContextFlags";
        case typescript_1.NodeFlags.TypeExcludesFlags:
            return "TypeExcludesFlags";
    }
}
exports.nodeFlagToName = nodeFlagToName;
